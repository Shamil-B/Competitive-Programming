from collections import deque

def parallelCourses(n, prerequisites):
    graph = {}
    inDegree = [0 for i in range(1,n+1)]

    for pre,course in prerequisites:
        if pre in graph:
            graph[pre].append(course)
        else:
            graph[pre] = [course]

        inDegree[course-1] += 1

    starters = []
    for i in range(1,n+1):
        if inDegree[i-1]==0:
            starters.append((i,1))

    q = deque(starters)
    studiedCourses = 0
    while q:
        course,semister = q.popleft()
        studiedCourses += 1
        if course in graph:
            for nextCourse in graph[course]:
                inDegree[nextCourse-1] -= 1
                if inDegree[nextCourse-1] == 0:
                    q.append((nextCourse,semister+1))

    return semister if studiedCourses==n else -1
